#!/usr/bin/python3

### === Imports === ###
import sys
import argparse

### === Classes === ###
class wordsBase:
    def __init__(self):
        self.file_path = ''
        self.words = [[], []]

    def loadWords(self, file_path):
        f = open(file_path, "r")
        for line in f:
            s = line[0:-1]
            self.words[0].append(s)
            self.words[1].append(1)
        f.close()
        return self.words


class dictionary:
    def make(self, keywords, output_file_path = "output.txt", max_lenght = 3):
        self.output_file = open(output_file_path, 'w')
        j = 0;
        for i in keywords[0]:
            self.make_rec("", keywords, j, 0, max_lenght)
            j += 1
        self.output_file.close()

    def make_rec(self, word, keywords, itera, depth, max_depth):
        word += keywords[0][itera]
        keywords[1][itera] -= 1
        f = True
        for i in range(0, len(keywords[1])):
            if keywords[1][i] != 0:
                f = False
                break
        self.output_file.write(word + '\n')

        if depth > (max_depth - 2):
            f = True;

        if f:
            pass
        else:
            for i in range(0, len(keywords[1])):
                if (keywords[1][i] > 0):
                    self.make_rec(word, keywords, i, depth + 1, max_depth)
        keywords[1][itera] += 1


### === Functions === ###
def createParser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_file', default = 'keywords.txt')
    parser.add_argument('-o', '--output_file', default = 'output.txt')
    parser.add_argument('-d', '--max_depth', default = 3)
    return parser


### === MAIN === ###
parser = createParser()
arguements = parser.parse_args(sys.argv[1:])

try:
    keywords = wordsBase()
    keywords.loadWords(arguements.input_file)
except FileNotFoundError:
    print("Keywords file \"" + arguements.input_file + "\" not found")

d1 = dictionary()
d1.make(keywords.words, arguements.output_file, int(arguements.max_depth))
